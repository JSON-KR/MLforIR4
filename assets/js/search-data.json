{
  
    
        "post0": {
            "title": "My Own Curriculum for Machine Learning",
            "content": "Motivation . The Rise of Machine Learning and Artificial Intelligence . contents . Do I need a masters or PhD to apply machine learning to my own domain? . contents . So I decided to build-up my own curriculum .",
            "url": "https://json-kr.github.io/MLforIR4/machine%20learning/2020/08/10/MyOwn.html",
            "relUrl": "/machine%20learning/2020/08/10/MyOwn.html",
            "date": " • Aug 10, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "실제 데이터로 한번 연습해보자!",
            "content": "# GDP 랑 Document의 관계가 있는가? # GDP랑 Citation? # GDP Citations per documents import numpy as np import pandas as pd FilePath = &#39;./Data/&#39; . ScimEn =pd.read_excel(FilePath + &#39;scimagojr-3.xlsx&#39;, na_values=&#39;...&#39;, index_col=&#39;Country&#39;) ScimEn.head(2) . Rank Documents Citable documents Citations Self-citations Citations per document H index . Country . China 1 | 127050 | 126767 | 597237 | 411683 | 4.7 | 138 | . United States 2 | 96661 | 94747 | 792274 | 265436 | 8.2 | 230 | . ScimEn = (ScimEn.where(ScimEn[&#39;Rank&#39;] &lt;= 15) .dropna()) . TopCountries = ScimEn.index TopCountries . Index([&#39;China&#39;, &#39;United States&#39;, &#39;Japan&#39;, &#39;United Kingdom&#39;, &#39;Russian Federation&#39;, &#39;Canada&#39;, &#39;Germany&#39;, &#39;India&#39;, &#39;France&#39;, &#39;South Korea&#39;, &#39;Italy&#39;, &#39;Spain&#39;, &#39;Iran&#39;, &#39;Australia&#39;, &#39;Brazil&#39;], dtype=&#39;object&#39;, name=&#39;Country&#39;) . cols = (np.arange(2006,2016) .astype(str) .tolist()) cols.append(&#39;Country Name&#39;) GDP = pd.read_csv(FilePath+&#39;world_bank.csv&#39;, skiprows=4, na_values=&#39;...&#39;, index_col=&#39;Country Name&#39;, usecols=cols) GDP.head(2) . 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 . Country Name . Aruba NaN | NaN | NaN | NaN | 2.467704e+09 | NaN | NaN | NaN | NaN | NaN | . Andorra 4.018196e+09 | 4.021331e+09 | 3.675728e+09 | 3.535389e+09 | 3.346317e+09 | 3.185605e+09 | 3.129538e+09 | 3.127550e+09 | NaN | NaN | . idx = GDP.index CountriesNotIn = ~TopCountries.isin(idx) TopCountries[CountriesNotIn] . Index([&#39;South Korea&#39;, &#39;Iran&#39;], dtype=&#39;object&#39;, name=&#39;Country&#39;) . idx[idx.str.contains(&#39;Korea&#39;)] . Index([&#39;Korea, Rep.&#39;, &#39;Korea, Dem. People’s Rep.&#39;], dtype=&#39;object&#39;, name=&#39;Country Name&#39;) . idx[idx.str.contains(&#39;Iran&#39;)] . Index([&#39;Iran, Islamic Rep.&#39;], dtype=&#39;object&#39;, name=&#39;Country Name&#39;) . GDP.rename(index = {&#39;Korea, Rep.&#39;:&#39;South Korea&#39;, &#39;Iran, Islamic Rep.&#39;:&#39;Iran&#39;}, inplace=True) . GDP.loc[TopCountries.to_list()] . 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 . Country Name . China 3.992331e+12 | 4.559041e+12 | 4.997775e+12 | 5.459247e+12 | 6.039659e+12 | 6.612490e+12 | 7.124978e+12 | 7.672448e+12 | 8.230121e+12 | 8.797999e+12 | . United States 1.479230e+13 | 1.505540e+13 | 1.501149e+13 | 1.459484e+13 | 1.496437e+13 | 1.520402e+13 | 1.554216e+13 | 1.577367e+13 | 1.615662e+13 | 1.654857e+13 | . Japan 5.496542e+12 | 5.617036e+12 | 5.558527e+12 | 5.251308e+12 | 5.498718e+12 | 5.473738e+12 | 5.569102e+12 | 5.644659e+12 | 5.642884e+12 | 5.669563e+12 | . United Kingdom 2.419631e+12 | 2.482203e+12 | 2.470614e+12 | 2.367048e+12 | 2.403504e+12 | 2.450911e+12 | 2.479809e+12 | 2.533370e+12 | 2.605643e+12 | 2.666333e+12 | . Russian Federation 1.385793e+12 | 1.504071e+12 | 1.583004e+12 | 1.459199e+12 | 1.524917e+12 | 1.589943e+12 | 1.645876e+12 | 1.666934e+12 | 1.678709e+12 | 1.616149e+12 | . Canada 1.564469e+12 | 1.596740e+12 | 1.612713e+12 | 1.565145e+12 | 1.613406e+12 | 1.664087e+12 | 1.693133e+12 | 1.730688e+12 | 1.773486e+12 | 1.792609e+12 | . Germany 3.332891e+12 | 3.441561e+12 | 3.478809e+12 | 3.283340e+12 | 3.417298e+12 | 3.542371e+12 | 3.556724e+12 | 3.567317e+12 | 3.624386e+12 | 3.685556e+12 | . India 1.265894e+12 | 1.374865e+12 | 1.428361e+12 | 1.549483e+12 | 1.708459e+12 | 1.821872e+12 | 1.924235e+12 | 2.051982e+12 | 2.200617e+12 | 2.367206e+12 | . France 2.607840e+12 | 2.669424e+12 | 2.674637e+12 | 2.595967e+12 | 2.646995e+12 | 2.702032e+12 | 2.706968e+12 | 2.722567e+12 | 2.729632e+12 | 2.761185e+12 | . South Korea 9.410199e+11 | 9.924316e+11 | 1.020510e+12 | 1.027730e+12 | 1.094499e+12 | 1.134796e+12 | 1.160809e+12 | 1.194429e+12 | 1.234340e+12 | 1.266580e+12 | . Italy 2.202170e+12 | 2.234627e+12 | 2.211154e+12 | 2.089938e+12 | 2.125185e+12 | 2.137439e+12 | 2.077184e+12 | 2.040871e+12 | 2.033868e+12 | 2.049316e+12 | . Spain 1.414823e+12 | 1.468146e+12 | 1.484530e+12 | 1.431475e+12 | 1.431673e+12 | 1.417355e+12 | 1.380216e+12 | 1.357139e+12 | 1.375605e+12 | 1.419821e+12 | . Iran 3.895523e+11 | 4.250646e+11 | 4.289909e+11 | 4.389208e+11 | 4.677902e+11 | 4.853309e+11 | 4.532569e+11 | 4.445926e+11 | 4.639027e+11 | NaN | . Australia 1.021939e+12 | 1.060340e+12 | 1.099644e+12 | 1.119654e+12 | 1.142251e+12 | 1.169431e+12 | 1.211913e+12 | 1.241484e+12 | 1.272520e+12 | 1.301251e+12 | . Brazil 1.845080e+12 | 1.957118e+12 | 2.056809e+12 | 2.054215e+12 | 2.208872e+12 | 2.295245e+12 | 2.339209e+12 | 2.409740e+12 | 2.412231e+12 | 2.319423e+12 | . # GDP, energy, ScimEn 세 데이터 프레임을 공통된 index (나라이름)를 기준으로 합쳐줄거임 df= pd.merge(ScimEn, GDP, how=&#39;inner&#39;, # inner 는 교집합을 의미함 left_index=True, right_index=True) # 뭐를 기준으로 교집합을 정할지 -&gt; index를 기준으로 하겠다 df . Rank Documents Citable documents Citations Self-citations Citations per document H index 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 . China 1.0 | 127050.0 | 126767.0 | 597237.0 | 411683.0 | 4.70 | 138.0 | 3.992331e+12 | 4.559041e+12 | 4.997775e+12 | 5.459247e+12 | 6.039659e+12 | 6.612490e+12 | 7.124978e+12 | 7.672448e+12 | 8.230121e+12 | 8.797999e+12 | . United States 2.0 | 96661.0 | 94747.0 | 792274.0 | 265436.0 | 8.20 | 230.0 | 1.479230e+13 | 1.505540e+13 | 1.501149e+13 | 1.459484e+13 | 1.496437e+13 | 1.520402e+13 | 1.554216e+13 | 1.577367e+13 | 1.615662e+13 | 1.654857e+13 | . Japan 3.0 | 30504.0 | 30287.0 | 223024.0 | 61554.0 | 7.31 | 134.0 | 5.496542e+12 | 5.617036e+12 | 5.558527e+12 | 5.251308e+12 | 5.498718e+12 | 5.473738e+12 | 5.569102e+12 | 5.644659e+12 | 5.642884e+12 | 5.669563e+12 | . United Kingdom 4.0 | 20944.0 | 20357.0 | 206091.0 | 37874.0 | 9.84 | 139.0 | 2.419631e+12 | 2.482203e+12 | 2.470614e+12 | 2.367048e+12 | 2.403504e+12 | 2.450911e+12 | 2.479809e+12 | 2.533370e+12 | 2.605643e+12 | 2.666333e+12 | . Russian Federation 5.0 | 18534.0 | 18301.0 | 34266.0 | 12422.0 | 1.85 | 57.0 | 1.385793e+12 | 1.504071e+12 | 1.583004e+12 | 1.459199e+12 | 1.524917e+12 | 1.589943e+12 | 1.645876e+12 | 1.666934e+12 | 1.678709e+12 | 1.616149e+12 | . Canada 6.0 | 17899.0 | 17620.0 | 215003.0 | 40930.0 | 12.01 | 149.0 | 1.564469e+12 | 1.596740e+12 | 1.612713e+12 | 1.565145e+12 | 1.613406e+12 | 1.664087e+12 | 1.693133e+12 | 1.730688e+12 | 1.773486e+12 | 1.792609e+12 | . Germany 7.0 | 17027.0 | 16831.0 | 140566.0 | 27426.0 | 8.26 | 126.0 | 3.332891e+12 | 3.441561e+12 | 3.478809e+12 | 3.283340e+12 | 3.417298e+12 | 3.542371e+12 | 3.556724e+12 | 3.567317e+12 | 3.624386e+12 | 3.685556e+12 | . India 8.0 | 15005.0 | 14841.0 | 128763.0 | 37209.0 | 8.58 | 115.0 | 1.265894e+12 | 1.374865e+12 | 1.428361e+12 | 1.549483e+12 | 1.708459e+12 | 1.821872e+12 | 1.924235e+12 | 2.051982e+12 | 2.200617e+12 | 2.367206e+12 | . France 9.0 | 13153.0 | 12973.0 | 130632.0 | 28601.0 | 9.93 | 114.0 | 2.607840e+12 | 2.669424e+12 | 2.674637e+12 | 2.595967e+12 | 2.646995e+12 | 2.702032e+12 | 2.706968e+12 | 2.722567e+12 | 2.729632e+12 | 2.761185e+12 | . South Korea 10.0 | 11983.0 | 11923.0 | 114675.0 | 22595.0 | 9.57 | 104.0 | 9.410199e+11 | 9.924316e+11 | 1.020510e+12 | 1.027730e+12 | 1.094499e+12 | 1.134796e+12 | 1.160809e+12 | 1.194429e+12 | 1.234340e+12 | 1.266580e+12 | . Italy 11.0 | 10964.0 | 10794.0 | 111850.0 | 26661.0 | 10.20 | 106.0 | 2.202170e+12 | 2.234627e+12 | 2.211154e+12 | 2.089938e+12 | 2.125185e+12 | 2.137439e+12 | 2.077184e+12 | 2.040871e+12 | 2.033868e+12 | 2.049316e+12 | . Spain 12.0 | 9428.0 | 9330.0 | 123336.0 | 23964.0 | 13.08 | 115.0 | 1.414823e+12 | 1.468146e+12 | 1.484530e+12 | 1.431475e+12 | 1.431673e+12 | 1.417355e+12 | 1.380216e+12 | 1.357139e+12 | 1.375605e+12 | 1.419821e+12 | . Iran 13.0 | 8896.0 | 8819.0 | 57470.0 | 19125.0 | 6.46 | 72.0 | 3.895523e+11 | 4.250646e+11 | 4.289909e+11 | 4.389208e+11 | 4.677902e+11 | 4.853309e+11 | 4.532569e+11 | 4.445926e+11 | 4.639027e+11 | NaN | . Australia 14.0 | 8831.0 | 8725.0 | 90765.0 | 15606.0 | 10.28 | 107.0 | 1.021939e+12 | 1.060340e+12 | 1.099644e+12 | 1.119654e+12 | 1.142251e+12 | 1.169431e+12 | 1.211913e+12 | 1.241484e+12 | 1.272520e+12 | 1.301251e+12 | . Brazil 15.0 | 8668.0 | 8596.0 | 60702.0 | 14396.0 | 7.00 | 86.0 | 1.845080e+12 | 1.957118e+12 | 2.056809e+12 | 2.054215e+12 | 2.208872e+12 | 2.295245e+12 | 2.339209e+12 | 2.409740e+12 | 2.412231e+12 | 2.319423e+12 | . df.plot(x = &#39;2015&#39;, y = &#39;Citations&#39;, kind=&#39;scatter&#39;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x1be8e434988&gt; . &#47928;&#51228; 2 . 지난 10년간 각 나라의 GDP 평균은 얼마냐? (missing value들은 계산에서 제외) . # Quiz! 왜 copy를 하는걸까? TOP15 = ans1.copy() years = np.arange(2006,2016).astype(str).tolist() avgGDP = TOP15[years].mean(axis=1).sort_values(ascending=False) avgGDP . &#47928;&#51228; 3 . 10년간의 GDP평균이 6번째로 큰 나라는 어디? 그나라는 10년사이에 GDP가 얼마나 변했나? . sixth_country = avgGDP.index[5] print(&#39;여섯번째로 10년간 평균 GDP가 큰 나라는&#39;, sixth_country) GDP_CHANGE = TOP15.loc[sixth_country][years][-1]-TOP15.loc[sixth_country][years][0] GDP_CHANGE . &#47928;&#51228; 4 . Energy Supply per Capita 의 평균은? . ESmean = TOP15[&#39;Energy Supply per Capita&#39;].mean() ESmean . &#47928;&#51228; 5 . 어느 나라가 가장 큰 % Renewable을 가지고 있냐? 그 나라의 % Renewable은 얼마냐? . country = TOP15[&#39;% Renewable&#39;].idxmax() percentage = TOP15.loc[&#39;Brazil&#39;][&#39;% Renewable&#39;] (country, percentage) . &#47928;&#51228; 6 . 사람당 Citable Documents를 추정하는 Column을 만들어라. 사람당 Citable Documents와 사람당 Energy supply사이의 피어슨 상관계수는? . new_column = TOP15[&#39;Citable documents&#39;]/TOP15[&#39;Energy Supply&#39;]*TOP15[&#39;Energy Supply per Capita&#39;] corr = new_column.corr(TOP15[&#39;Energy Supply per Capita&#39;]) corr . &#47928;&#51228; 7 . Top15의 국가중에 % Renewable 값이 평균 이상인 나라는 1, 아닌 나라는 0의 값을 주는 새로운 컬럼을 만들어라 . mean_percentage =TOP15[&#39;% Renewable&#39;].mean() HighRenew= TOP15[&#39;% Renewable&#39;] TOP15[TOP15[&#39;% Renewable&#39;] &lt; mean_percentage] = 0 TOP15[TOP15[&#39;% Renewable&#39;] &gt;= mean_percentage] = 1 HighRenew . &#47928;&#51228; 8 . 다음 Dictionary를 이용해 나라들을 대륙별로 묶어라. 예측 인구수의 Column을 새로 만들고 (Estimated Population = Energy Supply/Energy Supply per capita), 대륙별 나라의 수, 추정인구의 합계, 평균, 표준편차를 구하라 . ContinentDict = {&#39;China&#39;:&#39;Asia&#39;, &#39;United States&#39;:&#39;North America&#39;, &#39;Japan&#39;:&#39;Asia&#39;, &#39;United Kingdom&#39;:&#39;Europe&#39;, &#39;Russian Federation&#39;:&#39;Europe&#39;, &#39;Canada&#39;:&#39;North America&#39;, &#39;Germany&#39;:&#39;Europe&#39;, &#39;India&#39;:&#39;Asia&#39;, &#39;France&#39;:&#39;Europe&#39;, &#39;South Korea&#39;:&#39;Asia&#39;, &#39;Italy&#39;:&#39;Europe&#39;, &#39;Spain&#39;:&#39;Europe&#39;, &#39;Iran&#39;:&#39;Asia&#39;, &#39;Australia&#39;:&#39;Australia&#39;, &#39;Brazil&#39;:&#39;South America&#39;} . TOP15 = ans1.copy() ContinentDict = {&#39;China&#39;:&#39;Asia&#39;, &#39;United States&#39;:&#39;North America&#39;, &#39;Japan&#39;:&#39;Asia&#39;, &#39;United Kingdom&#39;:&#39;Europe&#39;, &#39;Russian Federation&#39;:&#39;Europe&#39;, &#39;Canada&#39;:&#39;North America&#39;, &#39;Germany&#39;:&#39;Europe&#39;, &#39;India&#39;:&#39;Asia&#39;, &#39;France&#39;:&#39;Europe&#39;, &#39;South Korea&#39;:&#39;Asia&#39;, &#39;Italy&#39;:&#39;Europe&#39;, &#39;Spain&#39;:&#39;Europe&#39;, &#39;Iran&#39;:&#39;Asia&#39;, &#39;Australia&#39;:&#39;Australia&#39;, &#39;Brazil&#39;:&#39;South America&#39;} TOP15[&#39;Estimated Population&#39;] = TOP15[&#39;Energy Supply&#39;]/TOP15[&#39;Energy Supply per Capita&#39;] df = pd.DataFrame.from_dict(ContinentDict, orient=&#39;index&#39;).rename(columns={0:&#39;Continent&#39;}) df = pd.merge(TOP15, df, left_index=True, right_index=True) df = df.pivot_table(index=&#39;Continent&#39;,values=&#39;Estimated Population&#39;, aggfunc= [np.size, np.sum,np.mean, np.std]) df .",
            "url": "https://json-kr.github.io/MLforIR4/2020/08/09/Pandas_Practice.html",
            "relUrl": "/2020/08/09/Pandas_Practice.html",
            "date": " • Aug 9, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Assignment 3 - More Pandas",
            "content": "Question 1 (20%) . Load the energy data from the file Energy Indicators.xls, which is a list of indicators of energy supply and renewable electricity production from the United Nations for the year 2013, and should be put into a DataFrame with the variable name of energy. . Keep in mind that this is an Excel file, and not a comma separated values file. Also, make sure to exclude the footer and header information from the datafile. The first two columns are unneccessary, so you should get rid of them, and you should change the column labels so that the columns are: . [&#39;Country&#39;, &#39;Energy Supply&#39;, &#39;Energy Supply per Capita&#39;, &#39;% Renewable&#39;] . Convert Energy Supply to gigajoules (there are 1,000,000 gigajoules in a petajoule). For all countries which have missing data (e.g. data with &quot;...&quot;) make sure this is reflected as np.NaN values. . Rename the following list of countries (for use in later questions): . &quot;Republic of Korea&quot;: &quot;South Korea&quot;, &quot;United States of America&quot;: &quot;United States&quot;, &quot;United Kingdom of Great Britain and Northern Ireland&quot;: &quot;United Kingdom&quot;, &quot;China, Hong Kong Special Administrative Region&quot;: &quot;Hong Kong&quot; . There are also several countries with numbers and/or parenthesis in their name. Be sure to remove these, . e.g. . &#39;Bolivia (Plurinational State of)&#39; should be &#39;Bolivia&#39;, . &#39;Switzerland17&#39; should be &#39;Switzerland&#39;. . . Next, load the GDP data from the file world_bank.csv, which is a csv containing countries&#39; GDP from 1960 to 2015 from World Bank. Call this DataFrame GDP. . Make sure to skip the header, and rename the following list of countries: . &quot;Korea, Rep.&quot;: &quot;South Korea&quot;, &quot;Iran, Islamic Rep.&quot;: &quot;Iran&quot;, &quot;Hong Kong SAR, China&quot;: &quot;Hong Kong&quot; . . Finally, load the Sciamgo Journal and Country Rank data for Energy Engineering and Power Technology from the file scimagojr-3.xlsx, which ranks countries based on their journal contributions in the aforementioned area. Call this DataFrame ScimEn. . Join the three datasets: GDP, Energy, and ScimEn into a new dataset (using the intersection of country names). Use only the last 10 years (2006-2015) of GDP data and only the top 15 countries by Scimagojr &#39;Rank&#39; (Rank 1 through 15). . The index of this DataFrame should be the name of the country, and the columns should be [&#39;Rank&#39;, &#39;Documents&#39;, &#39;Citable documents&#39;, &#39;Citations&#39;, &#39;Self-citations&#39;, &#39;Citations per document&#39;, &#39;H index&#39;, &#39;Energy Supply&#39;, &#39;Energy Supply per Capita&#39;, &#39;% Renewable&#39;, &#39;2006&#39;, &#39;2007&#39;, &#39;2008&#39;, &#39;2009&#39;, &#39;2010&#39;, &#39;2011&#39;, &#39;2012&#39;, &#39;2013&#39;, &#39;2014&#39;, &#39;2015&#39;]. . This function should return a DataFrame with 20 columns and 15 entries. . import numpy as np import pandas as pd FilePath = &#39;./Data/&#39; . energy = pd.read_excel(FilePath + &#39;Energy_Indicators.xls&#39;) energy.head(20) . Unnamed: 0 Unnamed: 1 Unnamed: 2 Unnamed: 3 Unnamed: 4 Unnamed: 5 . 0 NaN | NaN | Environmental Indicators: Energy | NaN | NaN | NaN | . 1 NaN | NaN | NaN | NaN | NaN | NaN | . 2 NaN | NaN | Energy Supply and Renewable Electricity Produc... | NaN | NaN | NaN | . 3 NaN | NaN | NaN | NaN | NaN | NaN | . 4 NaN | NaN | NaN | NaN | NaN | Last update: December 2015 | . 5 NaN | NaN | NaN | NaN | NaN | NaN | . 6 NaN | NaN | Choose a country from the following drop-down ... | NaN | NaN | Andorra | . 7 NaN | NaN | NaN | NaN | NaN | NaN | . 8 NaN | NaN | Country | Energy Supply | Energy Supply per capita | Renewable Electricity Production | . 9 NaN | NaN | NaN | Petajoules | Gigajoules | % | . 10 NaN | NaN | Andorra | 9 | 121 | 88.6957 | . 11 NaN | NaN | NaN | NaN | NaN | NaN | . 12 NaN | NaN | NaN | NaN | NaN | website: http://unstats.un.org/unsd/ENVIRONMEN... | . 13 NaN | NaN | NaN | NaN | NaN | NaN | . 14 NaN | NaN | NaN | NaN | NaN | NaN | . 15 NaN | NaN | NaN | Energy Supply | Energy Supply per capita | Renewable Electricity Production | . 16 NaN | NaN | NaN | Petajoules | Gigajoules | % | . 17 NaN | Afghanistan | Afghanistan | 321 | 10 | 78.6693 | . 18 NaN | Albania | Albania | 102 | 35 | 100 | . 19 NaN | Algeria | Algeria | 1959 | 51 | 0.55101 | . import numpy as np import pandas as pd def answer_one(): def country_name_change(df, colname, list_before, list_after): name_list = list(zip(list_before, list_after)) for country_before, country_after in name_list: get_id = df[df[colname]==country_before].index df.loc[get_id, colname] = country_after return df list_country_before = [&quot;Republic of Korea&quot;, &quot;United States of America&quot;, &quot;United Kingdom of Great Britain and Northern Ireland&quot;, &quot;China, Hong Kong Special Administrative Region&quot;, &quot;Iran &quot;] list_country_after = [&quot;South Korea&quot;, &quot;United States&quot;, &quot;United Kingdom&quot;, &quot;Hong Kong&quot;, &quot;Iran&quot;] energy = pd.read_excel(&#39;./Data/Energy_Indicators.xls&#39;) energy = energy.iloc[16:243,2:6] energy.rename(columns={&#39;Environmental Indicators: Energy&#39;:&#39;Country&#39;,&#39;Unnamed: 3&#39;:&#39;Energy Supply&#39;, &#39;Unnamed: 4&#39;:&#39;Energy Supply per Capita&#39;, &#39;Unnamed: 5&#39;:&#39;% Renewable&#39;},inplace=True) energy.replace(&#39;...&#39;,np.NaN,inplace=True) energy[&#39;Energy Supply&#39;] *= 10**6 name_before = [] name_after = [] for country in energy[&#39;Country&#39;].values: for letter in country: if letter == &#39;(&#39;: name_before.append(country) name_after.append(country.split(&#39;(&#39;)[0]) break elif letter.isdigit(): name_before.append(country) name_after.append(country.split(letter)[0]) break country_name_change(energy, &#39;Country&#39;, name_before, name_after) country_name_change(energy, &#39;Country&#39;, list_country_before, list_country_after) GDP = pd.read_csv(&#39;world_bank.csv&#39;, skiprows=4, na_values=&#39;...&#39;) list_country_before2 = [&quot;Korea, Rep.&quot;, &quot;Iran, Islamic Rep.&quot;, &quot;Hong Kong SAR, China&quot;] list_country_after2 = [&quot;South Korea&quot;, &quot;Iran&quot;, &quot;Hong Kong&quot;] country_name_change(GDP, &#39;Country Name&#39;, list_country_before2, list_country_after2) ScimEn =pd.read_excel(&#39;scimagojr-3.xlsx&#39;, na_values=&#39;...&#39;) years = (np.arange(2006,2016).astype(str) .tolist()) years.append(&#39;Country Name&#39;) GDP = GDP[years].set_index([&#39;Country Name&#39;]) ScimEn = (ScimEn.where(ScimEn[&#39;Rank&#39;] &lt;= 15) .dropna() .set_index([&#39;Country&#39;])) energy = energy.set_index(&#39;Country&#39;) df_merged = pd.merge(ScimEn, energy, how=&#39;inner&#39;, left_index=True, right_index=True) df_merged = df_merged.merge(GDP, how=&#39;inner&#39;, left_index=True, right_index=True) return df_merged answer_one() . KeyError Traceback (most recent call last) ~ Miniconda3 lib site-packages pandas core indexes base.py in get_loc(self, key, method, tolerance) 2645 try: -&gt; 2646 return self._engine.get_loc(key) 2647 except KeyError: pandas _libs index.pyx in pandas._libs.index.IndexEngine.get_loc() pandas _libs index.pyx in pandas._libs.index.IndexEngine.get_loc() pandas _libs hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item() pandas _libs hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item() KeyError: &#39;Country&#39; During handling of the above exception, another exception occurred: KeyError Traceback (most recent call last) &lt;ipython-input-7-905948226b97&gt; in &lt;module&gt; 71 72 return df_merged &gt; 73 answer_one() &lt;ipython-input-7-905948226b97&gt; in answer_one() 27 name_before = [] 28 name_after = [] &gt; 29 for country in energy[&#39;Country&#39;].values: 30 for letter in country: 31 if letter == &#39;(&#39;: ~ Miniconda3 lib site-packages pandas core frame.py in __getitem__(self, key) 2798 if self.columns.nlevels &gt; 1: 2799 return self._getitem_multilevel(key) -&gt; 2800 indexer = self.columns.get_loc(key) 2801 if is_integer(indexer): 2802 indexer = [indexer] ~ Miniconda3 lib site-packages pandas core indexes base.py in get_loc(self, key, method, tolerance) 2646 return self._engine.get_loc(key) 2647 except KeyError: -&gt; 2648 return self._engine.get_loc(self._maybe_cast_indexer(key)) 2649 indexer = self.get_indexer([key], method=method, tolerance=tolerance) 2650 if indexer.ndim &gt; 1 or indexer.size &gt; 1: pandas _libs index.pyx in pandas._libs.index.IndexEngine.get_loc() pandas _libs index.pyx in pandas._libs.index.IndexEngine.get_loc() pandas _libs hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item() pandas _libs hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item() KeyError: &#39;Country&#39; . Question 2 (6.6%) . The previous question joined three datasets then reduced this to just the top 15 entries. When you joined the datasets, but before you reduced this to the top 15 items, how many entries did you lose? . This function should return a single number. . def answer_two(): def country_name_change(df, colname, list_before, list_after): name_list = list(zip(list_before, list_after)) for country_before, country_after in name_list: get_id = df[df[colname]==country_before].index df.loc[get_id, colname] = country_after return df list_country_before = [&quot;Republic of Korea&quot;, &quot;United States of America&quot;, &quot;United Kingdom of Great Britain and Northern Ireland&quot;, &quot;China, Hong Kong Special Administrative Region&quot;, &quot;Iran &quot;] list_country_after = [&quot;South Korea&quot;, &quot;United States&quot;, &quot;United Kingdom&quot;, &quot;Hong Kong&quot;, &quot;Iran&quot;] energy = pd.read_excel(&#39;./Data/Energy_Indicators.xls&#39;) energy = energy.iloc[16:243,2:6] energy.rename(columns={&#39;Environmental Indicators: Energy&#39;:&#39;Country&#39;,&#39;Unnamed: 3&#39;:&#39;Energy Supply&#39;, &#39;Unnamed: 4&#39;:&#39;Energy Supply per Capita&#39;, &#39;Unnamed: 5&#39;:&#39;% Renewable&#39;},inplace=True) energy.replace(&#39;...&#39;,np.NaN,inplace=True) energy[&#39;Energy Supply&#39;] *= 10**6 name_before = [] name_after = [] for country in energy[&#39;Country&#39;].values: for letter in country: if letter == &#39;(&#39;: name_before.append(country) name_after.append(country.split(&#39;(&#39;)[0]) break elif letter.isdigit(): name_before.append(country) name_after.append(country.split(letter)[0]) break country_name_change(energy, &#39;Country&#39;, name_before, name_after) country_name_change(energy, &#39;Country&#39;, list_country_before, list_country_after) GDP = pd.read_csv(&#39;world_bank.csv&#39;, skiprows=4, na_values=&#39;...&#39;) list_country_before2 = [&quot;Korea, Rep.&quot;, &quot;Iran, Islamic Rep.&quot;, &quot;Hong Kong SAR, China&quot;] list_country_after2 = [&quot;South Korea&quot;, &quot;Iran&quot;, &quot;Hong Kong&quot;] country_name_change(GDP, &#39;Country Name&#39;, list_country_before2, list_country_after2) ScimEn =pd.read_excel(&#39;scimagojr-3.xlsx&#39;, na_values=&#39;...&#39;) years = (np.arange(2006,2016).astype(str) .tolist()) years.append(&#39;Country&#39;) GDP.rename(columns={&#39;Country Name&#39;:&#39;Country&#39;},inplace=True) GDP = GDP[years].set_index([&#39;Country&#39;]) ScimEn = (ScimEn.dropna() .set_index([&#39;Country&#39;])) energy = energy.set_index(&#39;Country&#39;) df_merged = pd.merge(ScimEn, energy, how=&#39;inner&#39;, left_index=True, right_index=True) df_merged = df_merged.merge(GDP, how=&#39;inner&#39;, left_index=True, right_index=True) df_merged2 = pd.merge(ScimEn, energy, how=&#39;outer&#39;, left_index=True, right_index=True) df_merged2 = df_merged2.merge(GDP, how=&#39;outer&#39;, left_index=True, right_index=True) num = df_merged2.shape[0] - 15 return num answer_two() . KeyError Traceback (most recent call last) ~ Miniconda3 lib site-packages pandas core indexes base.py in get_loc(self, key, method, tolerance) 2645 try: -&gt; 2646 return self._engine.get_loc(key) 2647 except KeyError: pandas _libs index.pyx in pandas._libs.index.IndexEngine.get_loc() pandas _libs index.pyx in pandas._libs.index.IndexEngine.get_loc() pandas _libs hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item() pandas _libs hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item() KeyError: &#39;Country&#39; During handling of the above exception, another exception occurred: KeyError Traceback (most recent call last) &lt;ipython-input-6-bde985832295&gt; in &lt;module&gt; 77 num = df_merged2.shape[0] - 15 78 return num &gt; 79 answer_two() &lt;ipython-input-6-bde985832295&gt; in answer_two() 25 name_before = [] 26 name_after = [] &gt; 27 for country in energy[&#39;Country&#39;].values: 28 for letter in country: 29 if letter == &#39;(&#39;: ~ Miniconda3 lib site-packages pandas core frame.py in __getitem__(self, key) 2798 if self.columns.nlevels &gt; 1: 2799 return self._getitem_multilevel(key) -&gt; 2800 indexer = self.columns.get_loc(key) 2801 if is_integer(indexer): 2802 indexer = [indexer] ~ Miniconda3 lib site-packages pandas core indexes base.py in get_loc(self, key, method, tolerance) 2646 return self._engine.get_loc(key) 2647 except KeyError: -&gt; 2648 return self._engine.get_loc(self._maybe_cast_indexer(key)) 2649 indexer = self.get_indexer([key], method=method, tolerance=tolerance) 2650 if indexer.ndim &gt; 1 or indexer.size &gt; 1: pandas _libs index.pyx in pandas._libs.index.IndexEngine.get_loc() pandas _libs index.pyx in pandas._libs.index.IndexEngine.get_loc() pandas _libs hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item() pandas _libs hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item() KeyError: &#39;Country&#39; . Answer the following questions in the context of only the top 15 countries by Scimagojr Rank (aka the DataFrame returned by answer_one()) . Question 3 (6.6%) . What is the average GDP over the last 10 years for each country? (exclude missing values from this calculation.) . This function should return a Series named avgGDP with 15 countries and their average GDP sorted in descending order. . def answer_three(): years = np.arange(2006,2016).astype(str).tolist() Top15 = answer_one().copy() avgGDP = Top15[years].mean(axis=1).sort_values(ascending=False) return avgGDP answer_three() . Question 4 (6.6%) . By how much had the GDP changed over the 10 year span for the country with the 6th largest average GDP? . This function should return a single number. . def answer_four(): years = np.arange(2006,2016).astype(str).tolist() Top15 = answer_one().copy()[years] avgGDP = Top15[years].mean(axis=1).sort_values(ascending=False) sixth_country = avgGDP.index[5] print(Top15.loc[sixth_country]) GDP_CHANGE = Top15.loc[sixth_country][years][9]-Top15.loc[sixth_country][years][0] return GDP_CHANGE answer_four() . Question 5 (6.6%) . What is the mean Energy Supply per Capita? . This function should return a single number. . def answer_five(): Top15 = answer_one() ESmean = Top15[&#39;Energy Supply per Capita&#39;].mean() return ESmean answer_five() . Question 6 (6.6%) . What country has the maximum % Renewable and what is the percentage? . This function should return a tuple with the name of the country and the percentage. . def answer_six(): Top15 = answer_one() ans6_country = Top15[&#39;% Renewable&#39;].idxmax() ans6_percentage = Top15.loc[ans6_country][&#39;% Renewable&#39;] ans6 = (ans6_country, ans6_percentage) return ans6 answer_six() . Question 7 (6.6%) . Create a new column that is the ratio of Self-Citations to Total Citations. What is the maximum value for this new column, and what country has the highest ratio? . This function should return a tuple with the name of the country and the ratio. . def answer_seven(): Top15 = answer_one() new_column = Top15[&#39;Self-citations&#39;]/Top15[&#39;Citations&#39;] ans7_country = new_column.idxmax() ans7_ratio = new_column.max() ans7 = (ans7_country, ans7_ratio) return ans7 answer_seven() . Question 8 (6.6%) . Create a column that estimates the population using Energy Supply and Energy Supply per capita. What is the third most populous country according to this estimate? . This function should return a single string value. . def answer_eight(): Top15 = answer_one().copy() new_column = Top15[&#39;Energy Supply&#39;]/Top15[&#39;Energy Supply per Capita&#39;] ans8 = new_column.sort_values(ascending=False).index[2] return ans8 answer_eight() . Question 9 (6.6%) . Create a column that estimates the number of citable documents per person. What is the correlation between the number of citable documents per capita and the energy supply per capita? Use the .corr() method, (Pearson&#39;s correlation). . This function should return a single number. . (Optional: Use the built-in function plot9() to visualize the relationship between Energy Supply per Capita vs. Citable docs per Capita) . def answer_nine(): Top15 = answer_one().copy() new_column = Top15[&#39;Citable documents&#39;]/Top15[&#39;Energy Supply&#39;]*Top15[&#39;Energy Supply per Capita&#39;] ans9 = new_column.corr(Top15[&#39;Energy Supply per Capita&#39;]) return ans9 answer_nine() . def plot9(): import matplotlib as plt %matplotlib inline Top15 = answer_one() Top15[&#39;PopEst&#39;] = Top15[&#39;Energy Supply&#39;] / Top15[&#39;Energy Supply per Capita&#39;] Top15[&#39;Citable docs per Capita&#39;] = Top15[&#39;Citable documents&#39;] / Top15[&#39;PopEst&#39;] Top15.plot(x=&#39;Citable docs per Capita&#39;, y=&#39;Energy Supply per Capita&#39;, kind=&#39;scatter&#39;, xlim=[0, 0.0006]) #plot9() . #plot9() # Be sure to comment out plot9() before submitting the assignment! . Question 10 (6.6%) . Create a new column with a 1 if the country&#39;s % Renewable value is at or above the median for all countries in the top 15, and a 0 if the country&#39;s % Renewable value is below the median. . This function should return a series named HighRenew whose index is the country name sorted in ascending order of rank. . def answer_ten(): Top15 = answer_one().copy().sort_values(&#39;Rank&#39;, ascending=True) mean_percentage =Top15[&#39;% Renewable&#39;].mean() HighRenew= Top15[&#39;% Renewable&#39;] Top15[Top15[&#39;% Renewable&#39;] &lt; mean_percentage] = 0 Top15[Top15[&#39;% Renewable&#39;] &gt;= mean_percentage] = 1 return HighRenew answer_ten() . Question 11 (6.6%) . Use the following dictionary to group the Countries by Continent, then create a dateframe that displays the sample size (the number of countries in each continent bin), and the sum, mean, and std deviation for the estimated population of each country. . ContinentDict = {&#39;China&#39;:&#39;Asia&#39;, &#39;United States&#39;:&#39;North America&#39;, &#39;Japan&#39;:&#39;Asia&#39;, &#39;United Kingdom&#39;:&#39;Europe&#39;, &#39;Russian Federation&#39;:&#39;Europe&#39;, &#39;Canada&#39;:&#39;North America&#39;, &#39;Germany&#39;:&#39;Europe&#39;, &#39;India&#39;:&#39;Asia&#39;, &#39;France&#39;:&#39;Europe&#39;, &#39;South Korea&#39;:&#39;Asia&#39;, &#39;Italy&#39;:&#39;Europe&#39;, &#39;Spain&#39;:&#39;Europe&#39;, &#39;Iran&#39;:&#39;Asia&#39;, &#39;Australia&#39;:&#39;Australia&#39;, &#39;Brazil&#39;:&#39;South America&#39;} . This function should return a DataFrame with index named Continent [&#39;Asia&#39;, &#39;Australia&#39;, &#39;Europe&#39;, &#39;North America&#39;, &#39;South America&#39;] and columns [&#39;size&#39;, &#39;sum&#39;, &#39;mean&#39;, &#39;std&#39;] . def answer_eleven(): ContinentDict = {&#39;China&#39;:&#39;Asia&#39;, &#39;United States&#39;:&#39;North America&#39;, &#39;Japan&#39;:&#39;Asia&#39;, &#39;United Kingdom&#39;:&#39;Europe&#39;, &#39;Russian Federation&#39;:&#39;Europe&#39;, &#39;Canada&#39;:&#39;North America&#39;, &#39;Germany&#39;:&#39;Europe&#39;, &#39;India&#39;:&#39;Asia&#39;, &#39;France&#39;:&#39;Europe&#39;, &#39;South Korea&#39;:&#39;Asia&#39;, &#39;Italy&#39;:&#39;Europe&#39;, &#39;Spain&#39;:&#39;Europe&#39;, &#39;Iran&#39;:&#39;Asia&#39;, &#39;Australia&#39;:&#39;Australia&#39;, &#39;Brazil&#39;:&#39;South America&#39;} Top15 = answer_one().copy() Top15[&#39;Estimated Population&#39;] = Top15[&#39;Energy Supply&#39;]/Top15[&#39;Energy Supply per Capita&#39;] df = pd.DataFrame.from_dict(ContinentDict, orient=&#39;index&#39;).rename(columns={0:&#39;Continent&#39;}) df = pd.merge(Top15, df, left_index=True, right_index=True) df = df.pivot_table(index=&#39;Continent&#39;,values=&#39;Estimated Population&#39;, aggfunc= [np.size, np.sum,np.mean, np.std]) return df answer_eleven() . Question 12 (6.6%) . Cut % Renewable into 5 bins. Group Top15 by the Continent, as well as these new % Renewable bins. How many countries are in each of these groups? . This function should return a Series with a MultiIndex of Continent, then the bins for % Renewable. Do not include groups with no countries. . def answer_twelve(): ContinentDict = {&#39;China&#39;:&#39;Asia&#39;, &#39;United States&#39;:&#39;North America&#39;, &#39;Japan&#39;:&#39;Asia&#39;, &#39;United Kingdom&#39;:&#39;Europe&#39;, &#39;Russian Federation&#39;:&#39;Europe&#39;, &#39;Canada&#39;:&#39;North America&#39;, &#39;Germany&#39;:&#39;Europe&#39;, &#39;India&#39;:&#39;Asia&#39;, &#39;France&#39;:&#39;Europe&#39;, &#39;South Korea&#39;:&#39;Asia&#39;, &#39;Italy&#39;:&#39;Europe&#39;, &#39;Spain&#39;:&#39;Europe&#39;, &#39;Iran&#39;:&#39;Asia&#39;, &#39;Australia&#39;:&#39;Australia&#39;, &#39;Brazil&#39;:&#39;South America&#39;} Top15 = answer_one().copy() df_cont = pd.DataFrame.from_dict(ContinentDict, orient=&#39;index&#39;).rename(columns={0:&#39;Continent&#39;}) df_merge = pd.merge(Top15,df_cont,left_index=True,right_index=True) series_bin = pd.cut(df_merge[&#39;% Renewable&#39;],5) df_merge[&#39;&#39;] = series_bin ans = df_merge.pivot_table(index=&#39;Continent&#39;,values = &#39;% Renewable&#39;, columns=&#39;&#39;, aggfunc=np.size, dropna=True) ans = ans.dropna(axis=1,how=&#39;all&#39;) return ans answer_twelve() .",
            "url": "https://json-kr.github.io/MLforIR4/2020/08/09/Advanced-Python-Pandas.html",
            "relUrl": "/2020/08/09/Advanced-Python-Pandas.html",
            "date": " • Aug 9, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://json-kr.github.io/MLforIR4/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": ". Jaewon Son . Living in accordance with Kaizen (improvements) . I am a thermal and fluid management engineer working in the automotive industry. Born and bred in South Korea, but currently living in Japan. My key skills and interests are: . Computational Fluid Dynamics (CFD) | Turbulent flow | Battery thermal management | Mechanical design | Applying Machine Learning in manufacturing and product development. | . Although machine learning is not my expertise yet, I have been consistently building up relevant skill-sets, aspiring to bring innovations in the manufacturing industry. . Besides the above, outside of engineering, I enjoy the followings: . Brazilian Jiu-Jitsu | Travel | Running. | . For those who want to know more about me, please email me. .",
          "url": "https://json-kr.github.io/MLforIR4/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://json-kr.github.io/MLforIR4/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}